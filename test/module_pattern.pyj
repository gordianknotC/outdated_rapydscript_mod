#!/usr/bin/python
# -*- coding: utf-8 -*-
import stdlib
import stdlib2
def isEmpty (n):
	if type( n ) == 'object':
		if len( n ) == 0: return True
		for key in dict.keys( n ):
			return False
		return True

	if type( n ) == 'string':
		if n.strip( ):return False
		else:return True

	if n:return False
	else:return True
def cls (cls,*args):
	tmp = ''
	for i in range( 1, len( arguments ) ):
		tmp += 'arguments[' + i + '],'
	fn = arguments[0]
	ins = eval( 'new fn(' + tmp[0:-1] + ')' )
	return ins
def set_scope(module_path):
	scope = {}
	scope.__module__ = module_path
	return scope
def module (fn_module):
	def getAllExcept(lst,_module):
		def wrapper():
			name = _module.name
			_filter = lst
			tmp = {}
			m = eval(name).prototype
			for k,v in dict.items(m):
				is_k_in_filter = k in _filter
				if not is_k_in_filter:
					tmp[k] = v
			return tmp
		return wrapper

	if isEmpty( fn_module.prototype ):
		module_member_data = fn_module( )
		module_member_data.ALL = getAllExcept(['ALL','scope'],fn_module)
		scope_attrs = []
		scope = module_member_data.scope
		_filter = ['arguments','caller','length','name','prototype','__proto__','__module__']
		for key,value in dict.items(module_member_data):
			if key == 'scope':
				for k,v in dict.items(value):
					is_k_in_filter = k in _filter
					if not is_k_in_filter:
						console.log('scope var..',k,v)
						if isEmpty(module_member_data[k]): module_member_data[k] = v
						else: raise '[Error][Naming Confliction]module-scope variable: ['+k+'] interfere with module member: ['+k+']'
						scope['_'+k] = v
						scope_attrs.push(k)
		module_member_data['scope'] = scope
		fn_module.prototype = module_member_data		# expose module members to module prototype

		def setter_callback (scope_obj, _attr):
			def wrapper (_value):
				eval(scope_obj.__module__).prototype.scope['_$_'+_attr] = _value
			return wrapper
		def getter_callback (scope_obj, _attr):
			def wrapper ():
				return eval(scope_obj.__module__).prototype.scope['_$_'+_attr]
			return wrapper

		for attr in scope_attrs:
			console.log('set getter and setter for ',attr)
			scope.__defineSetter__( attr, setter_callback( scope, attr ) )
			scope.__defineGetter__( attr, getter_callback( scope, attr ) )

		fn_module.prototype.__defineSetter__(attr,getter_callback( scope, attr ))
		fn_module.prototype.__defineGetter__(attr,getter_callback( scope, attr ))

		fn_module.prototype.prototype = fn_module.prototype
		return fn_module.prototype
	else:
		return fn_module.prototype
def class_properties (cls, props):
	if not cls.prototype.__classproperty__:
		console.log( 'set class properties:::' )
		for k, v in dict.items( props ):
			setattr( cls.prototype, k, v )
			console.log( k, v )
		cls.prototype.__classproperty__ = True


#@module
def moduleA ():
	scope = set_scope('moduleA')
	# declare module-scope variables
	scope.module_variableB 	= 2
	scope.module_variableA 	= 1
	# nested module

	class RapydWeb:
		def get_variableA(self):
			console.log('[moduleA][get_variableA] ',scope.module_variableA)
		def echo(self,s):
			if self.debug:
				return s
	RapydWeb.prototype.debug = False	# debug mode [class property]
	class Controller( RapydWeb ):
		def get_module_variableA(self):
			# get module scope value => scope().module_variable
			console.log("\t[moduleA][Controller][Get] module_variableA = ",scope.module_variableA)
		def set_module_variableA(self,value):
			console.log("\t[moduleA][Controller][Set] set moduleA's module_variableA to",value)
			scope.module_variableA = value	# set module scope value => scope().module_variable = xx

	r = RapydWeb()
	r.get_variableA()
	# expose moduleA's members
	return { RapydWeb: RapydWeb, Controller: Controller ,scope:scope}

#@module
def moduleB ():
	# import moduleA
	core = module(moduleA)
	#core = moduleA
	# set module moduleA's debug to True
	console.log('\t[moduleB] set moduleA"s debug mode to True')
	core.RapydWeb.prototype.debug = True
	# import classes and variables from moduleA
	RapydWeb,  Controller ,scope_A = core.RapydWeb, core.Controller, core.scope

	# inherited from moduleA's Controller
	class BlogController( Controller ):		pass
	class ModController( Controller ):
		def get_module_variableA(self):
			# get module scope value => scope().module_variable
			console.log("\t[moduleB][ModController][Get] module_variableA = ",scope_A.module_variableA)
		def set_module_variableA(self,value):
			console.log("\t[moduleB][ModController][Set] set scopeA's module_variableA to",value)
			scope_A.module_variableA = value # set module scope value => scope().module_variable = xx
	# expose moduleB's members
	return {BlogController:BlogController,ModController:ModController}


core 			= module(moduleA)
#core			= moduleA
rapyd 			= cls( core.RapydWeb, 'init' )
rapyd.c 		= cls( core.Controller, 'init' )

console.log('===== test for class property of RapydWeb inside moduleA =====================')
console.log('')

console.log('----- change moduleA"s debug mode from main scope-----')
console.log('\tdefault debug mode of moduleA = ',rapyd.debug)							# false
console.log('\techo = ',rapyd.c.echo('[moduleA.controller.echo]') or 'no output')		# no output!
console.log("\tset moduleA's debug mode to True from outer scope of moduleA")
core.RapydWeb.prototype.debug = True													# turn on output
console.log('\tcurrent debug mode = ',rapyd.debug) 										# true
console.log("\techo = ",rapyd.c.echo('[moduleA.controller.echo]' or 'no output'))		# output: RapydWeb
console.log("\tset moduleA's debug mode to False from outer scope of moduleA")
core.RapydWeb.prototype.debug = False													# turn off output
console.log('')


console.log('----- change moduleA"s debug mode from moduleB -----')
console.log('\tbefore initialize moduleB, debug mode = ',rapyd.debug)

# within moduleB , we change debug mode to True
app 			= module( moduleB )
#app 			= moduleB
console.log('\tafter initialize moduleB, debug mode = ',rapyd.debug)
rapyd.c.blog 	= cls(app.BlogController,'init')
rapyd.c.mod = cls(app.ModController, 'init' )
console.log("\techo = ",rapyd.c.blog.echo('[moduleBblogg.echo]' or 'no output'))
console.log('')
console.log('')
console.log('===== test for module-scope variable =====================')
console.log('')
console.log('')

rapyd.c.get_module_variableA()					# default value of module_variableA = 1

rapyd.c.set_module_variableA('A1')				# set moduleA's module_variableA to A1
console.log("\t[main][Get] module_variableA = ",moduleA.prototype.module_variableA)	# A1 (get from main)
rapyd.c.get_module_variableA()														# A1 (get from moduleA)
rapyd.c.mod.get_module_variableA()													# A1 (get from moduleB)
rapyd.c.mod.set_module_variableA('B1')			# set moduleA's module_variableA to B1 from moduleB
console.log("\t[main][Get] module_variableA = ",moduleA.prototype.module_variableA) # B1 (get from main)
rapyd.c.mod.get_module_variableA()													# B1 (get from moduleB)
rapyd.c.get_module_variableA()														# B1 (get from moduleA)
rapyd.c.mod.set_module_variableA('B2')			# set moduleA's module_variableA to B2 from moduleB
console.log("\t[main][Get] module_variableA = ",moduleA.prototype.module_variableA) # B2 (get from main)
rapyd.c.mod.get_module_variableA()													# B2 (get from moduleB)
rapyd.c.get_module_variableA()	 													# B2 (get from moduleA)





